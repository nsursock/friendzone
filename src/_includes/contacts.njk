<div x-cloak x-show="openContacts" class="relative z-10" aria-labelledby="slide-over-title" role="dialog" aria-modal="true">
  <!-- Background backdrop, show/hide based on slide-over state. -->
  <!--
    Background backdrop, show/hide based on slide-over state.

    Entering: "ease-in-out duration-500"
      From: "opacity-0"
      To: "opacity-100"
    Leaving: "ease-in-out duration-500"
      From: "opacity-100"
      To: "opacity-0"
  -->
  <div x-show="openContacts" 
        x-transition:enter="ease-in-out duration-500"
        x-transition:enter-start="opacity-0 "
        x-transition:enter-end="opacity-100 "
        x-transition:leave="ease-in-out duration-500"
        x-transition:leave-start="opacity-100 "
        x-transition:leave-end="opacity-0 "
      class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity backdrop-blur"></div>

  <div class="fixed inset-0 overflow-hidden" x-data="dataContact">
    <div class="absolute inset-0 overflow-hidden">
      <div class="pointer-events-none fixed inset-y-0 right-0 flex max-w-full pl-10 sm:pl-16">
        <!--
          Slide-over panel, show/hide based on slide-over state.

          Entering: "transform transition ease-in-out duration-500 sm:duration-700"
            From: "translate-x-full"
            To: "translate-x-0"
          Leaving: "transform transition ease-in-out duration-500 sm:duration-700"
            From: "translate-x-0"
            To: "translate-x-full"
        -->
        <template x-if="$store.auth.user">
          <div x-show="openContacts" @click.outside="openContacts = false"
              x-transition:enter="transform transition ease-in-out duration-500 sm:duration-700"
              x-transition:enter-start="translate-x-full"
              x-transition:enter-end="translate-x-0"
              x-transition:leave="transform transition ease-in-out duration-500 sm:duration-700"
              x-transition:leave-start="translate-x-0"
              x-transition:leave-end="translate-x-full"
            x-data="{ contactList: [], unreadList: [], selectedTab: 'All', person: '' }" 
            x-init="contactList = (await (await fetch(`/api/directory?mode=friends&email=${$store.auth.user?.email}`)).json()).data;
              unreadList = (await (await fetch(`/api/contact?mode=unread&email=${$store.auth.user?.email}`)).json()).data"
            class="pointer-events-auto w-screen max-w-md">
            <div class="flex h-full flex-col overflow-y-scroll bg-white shadow-xl">
              <div class="p-6">
                <div class="flex items-start justify-between">
                  <h2 class="text-lg font-medium text-gray-900" id="slide-over-title">Chat</h2>
                  <div class="ml-3 flex h-7 items-center">
                    <button @click="if (selectedTab === 'All') openContacts = !openContacts; else { tabs.splice(tabs.findIndex(tab => tab.id === selectedTab), 1); selectedTab = 'All' }" type="button" class="rounded-md bg-white text-gray-400 hover:text-gray-500 focus:ring-2 focus:ring-indigo-500">
                      <span class="sr-only">Close panel</span>
                      <!-- Heroicon name: outline/x-mark -->
                      <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"/>
                      </svg>
                    </button>
                  </div>
                </div>
              </div>
              <div class="border-b border-gray-200">
                <div class="px-6">
                  <nav class="-mb-px flex overflow-x-auto">
                    <template x-for="tab in tabs" :key="tab.id">
                      <button @click="selectedTab = tab.id" class="mr-3 whitespace-nowrap pb-4 px-1 border-b-2 font-medium text-sm"
                        :class="selectedTab === tab.id ? 'border-indigo-500 text-indigo-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'">
                        <template x-if="!tab.picture && tabs.slice(0, 3).findIndex((t) => t.id === tab.id) === -1">
                          <span class="inline-flex h-6 w-6 items-center justify-center rounded-full bg-gray-100">
                            <span class="text-xs font-medium leading-none text-gray-400" x-text="tab.initials"></span>
                          </span>
                        </template>
                        <template x-if="tab.picture && tabs.slice(0, 3).findIndex((t) => t.id === tab.id) === -1">
                          <img class="h-6 w-6 rounded-full" :src="tab.picture.includes('unsplash') ? tab.picture+'&fit=facearea&facepad=2&w=256&h=256&q=80' : tab.picture" alt=""/>
                        </template>
                        <template x-if="!tab.picture && tabs.slice(0, 3).findIndex((t) => t.id === tab.id) !== -1">
                          <span x-text="tab.id"></span>
                        </template>
                      </button>
                    </template>
                  </nav>
                </div>
              </div>
              <template x-for="tab in tabs" :key="tab.id">
                <div>
                  <template x-if="tabs.slice(0, 3).findIndex((t) => t.id === tab.id) === -1">
                    <div x-show="selectedTab === tab.id"
                  x-init="handleKeys(receiver)" x-data="{ receiver: tab.id, derivedKey: null, messages: null }">
                      <h3 class="text-center mt-3 text-lg font-medium text-gray-900" id="slide-over-title" x-text="tab.name"></h2>

                      <!--
  This example requires some changes to your config:
  
  ```
  // tailwind.config.js
  module.exports = {
    // ...
    plugins: [
      // ...
      require('@tailwindcss/forms'),
    ],
  }
  ```
-->
                      <template x-if="derivedKey">
                        <form x-ref="content"  @submit.prevent="handleSubmit" class="mx-6 my-3" 
                    x-data="{ tab: 'Write', content: '' }">
                          <div>
                            <div class="flex items-center" aria-orientation="horizontal" role="tablist">
                              <!-- Selected: "text-gray-900 bg-gray-100 hover:bg-gray-200", Not Selected: "text-gray-500 hover:text-gray-900 bg-white hover:bg-gray-100" -->
                              <button @click="tab = 'Write'" id="tabs-1-tab-1" :class="tab === 'Write' && 'text-gray-900 bg-gray-100 hover:bg-gray-200'" class="text-gray-500 hover:text-gray-900 bg-white hover:bg-gray-100 rounded-md border border-transparent px-3 py-1.5 text-sm font-medium" aria-controls="tabs-1-panel-1" role="tab" type="button">Write</button>
                              <!-- Selected: "text-gray-900 bg-gray-100 hover:bg-gray-200", Not Selected: "text-gray-500 hover:text-gray-900 bg-white hover:bg-gray-100" -->
                              <button @click="tab = 'Preview'" id="tabs-1-tab-2" :class="tab === 'Preview' && 'text-gray-900 bg-gray-100 hover:bg-gray-200'" class="text-gray-500 hover:text-gray-900 bg-white hover:bg-gray-100 ml-2 rounded-md border border-transparent px-3 py-1.5 text-sm font-medium" aria-controls="tabs-1-panel-2" role="tab" type="button">Preview</button>

                            </div>
                            <div class="mt-2">
                              <div x-show="tab === 'Write'" id="tabs-1-panel-1" class="-m-0.5 rounded-lg p-0.5" aria-labelledby="tabs-1-tab-1" role="tabpanel" tabindex="0">
                                <label for="comment" class="sr-only">Comment</label>
                                <div>
                                  <textarea x-model="content" rows="4" name="comment" id="comment" class="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm" placeholder="Write your message..."></textarea>
                                </div>
                              </div>
                              <div x-show="tab === 'Preview'" id="tabs-1-panel-2" class="-m-0.5 rounded-lg p-0.5" aria-labelledby="tabs-1-tab-2" role="tabpanel" tabindex="0">
                                <div class="border-b">
                                  <div x-html="marked.parse(content)" class="prose mx-px mt-px px-3 pt-2 pb-12 text-sm leading-5 text-gray-800"></div>
                                </div>
                              </div>
                            </div>
                          </div>
                          <p class="mt-3 text-sm text-gray-500">
                            <a target="_blank" class="hover:underline" href="https://www.markdownguide.org/cheat-sheet/">You can use markdown to format your text.</a>
                          </p>
                          <div class="mt-2 flex justify-end">
                            <button type="submit" class="inline-flex items-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">Send</button>
                          </div>
                        </form>
                      </template>

                      <div class="mx-6 my-3">

                        <template x-if="!derivedKey || !messages">
                          <div class="text-center mt-5">
                            <svg class="animate-spin mx-auto h-12 w-12 text-gray-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            <h3 class="mt-2 text-sm font-medium text-gray-900">Loading... Please wait.</h3>
                            <p class="mt-1 text-sm text-gray-500">This messaging service uses end to end encryption.</p>
                            {# <div class="mt-6">
                              <button type="button" class="inline-flex items-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">
                                <!-- Heroicon name: mini/plus -->
                                <svg class="-ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                  <path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z"/>
                                </svg>
                               Cancel
                             </button>
                            </div> #}
                          </div>
                        </template>

                        <template x-if="derivedKey">
                          <ul role="list" class=""
                      x-effect="messages = (await (await fetch(`/api/contact?mode=conversation&sender=${$store.auth.user?.email}&receiver=${tab.id}`)).json()).data">
                            <template x-for="message in messages || []" :key="message.id">
                              <li class="py-4">
                                <div class="flex">
                                  <template x-if="!message.sender.avatar_url">
                                    <span class="inline-block h-6 w-6 overflow-hidden rounded-full bg-gray-100">
                                      <svg class="h-full w-full text-gray-300" fill="currentColor" viewBox="0 0 24 24">
                                        <path d="M24 20.993V24H0v-2.996A14.977 14.977 0 0112.004 15c4.904 0 9.26 2.354 11.996 5.993zM16.002 8.999a4 4 0 11-8 0 4 4 0 018 0z"/>
                                      </svg>
                                    </span>
                                  </template>
                                  <template x-if="message.sender.avatar_url">
                                    <img class="h-6 w-6 rounded-full" :src="message.sender.avatar_url.includes('unsplash') ? message.sender.avatar_url+'&fit=facearea&facepad=2&w=256&h=256&q=80' : message.sender.avatar_url" alt="">
                                  </template>
                                  <div class="flex-1 space-y-1 ml-3">
                                    <div class="flex items-center justify-between">
                                      <h3 class="text-sm font-medium" x-text="message.sender.first_name + ' ' + message.sender.last_name"></h3>
                                      <p class="text-sm text-gray-500" x-text="formatDate(new Date(message.created_at), 'distance')"></p>
                                    </div>
                                    <p x-html="marked.parse(await decrypt(message.content))" class="prose text-sm text-gray-500"></p>
                                  </div>
                                </div>
                              </li>
                            </template>

                            <!-- More items... -->
                          </ul>
                        </template>
                      </div>

                    </div>
                  </template>
                </div>
              </template>
              <div x-show="selectedTab === 'All' || selectedTab === 'Unread'" 
                x-data="{ contacts: [] }" x-effect="contacts = selectedTab === 'All' ? contactList : unreadList">
                <ul role="list" class="flex-1 divide-y divide-gray-200 overflow-y-auto">
                  <template x-for="contact in contacts.filter(contact => contact.last_name !== null)
                    .sort((a, b) => a.full_name.localeCompare(b.full_name))">
                    <li>
                      <div class="group relative flex items-center py-6 px-5">
                        <button @click="tabs.push({ 
                          id: contact.email, 
                          name: contact.first_name + ' ' + contact.last_name,
                          initials: contact.first_name[0] + contact.last_name[0], 
                          picture: contact.avatar_url 
                        }); selectedTab = contact.email" class="-m-1 block flex-1 p-1">
                          <div class="absolute inset-0 group-hover:bg-gray-50" aria-hidden="true"></div>
                          <div class="relative flex min-w-0 flex-1 items-center">
                            <template x-if="!contact.avatar_url">
                              <span class="h-10 w-10 overflow-hidden rounded-full bg-gray-100">
                                <svg class="h-full w-full text-gray-300" fill="currentColor" viewBox="0 0 24 24">
                                  <path d="M24 20.993V24H0v-2.996A14.977 14.977 0 0112.004 15c4.904 0 9.26 2.354 11.996 5.993zM16.002 8.999a4 4 0 11-8 0 4 4 0 018 0z"/>
                                </svg>
                              </span>
                            </template>
                            <template x-if="contact.avatar_url">
                              <span class="relative inline-block flex-shrink-0">
                                <img class="h-10 w-10 rounded-full" :src="contact.avatar_url?.includes('unsplash') ? contact.avatar_url+'&fit=facearea&facepad=2&w=256&h=256&q=80' : contact.avatar_url" alt="">
                                <!-- Online: "bg-green-400", Offline: "bg-gray-300" -->
                                <span class="bg-green-400 absolute top-0 right-0 block h-2.5 w-2.5 rounded-full ring-2 ring-white" aria-hidden="true"></span>
                              </span>
                            </template>
                            <div class="ml-4 truncate">
                              <p class="text-left truncate text-sm font-medium text-gray-900" x-text="contact.first_name + ' ' + contact.last_name"></p>
                              <p class="text-left truncate text-sm text-gray-500" x-text="`@${contact.user_name}`"></p>
                            </div>
                          </div>
                        </button>
                        <div class="relative ml-2 inline-block flex-shrink-0 text-left" x-data="{ open: false }">
                          <button @click="open = !open" type="button" class="group relative inline-flex h-8 w-8 items-center justify-center rounded-full bg-white focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2" id="options-menu-0-button" aria-expanded="false" aria-haspopup="true">
                            <span class="sr-only">Open options menu</span>
                            <span class="flex h-full w-full items-center justify-center rounded-full">
                              <!-- Heroicon name: mini/ellipsis-vertical -->
                              <svg class="h-5 w-5 text-gray-400 group-hover:text-gray-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                <path d="M10 3a1.5 1.5 0 110 3 1.5 1.5 0 010-3zM10 8.5a1.5 1.5 0 110 3 1.5 1.5 0 010-3zM11.5 15.5a1.5 1.5 0 10-3 0 1.5 1.5 0 003 0z"/>
                              </svg>
                            </span>
                          </button>

                          <!--
                      Dropdown panel, show/hide based on dropdown state.

                      Entering: "transition ease-out duration-100"
                        From: "transform opacity-0 scale-95"
                        To: "transform opacity-100 scale-100"
                      Leaving: "transition ease-in duration-75"
                        From: "transform opacity-100 scale-100"
                        To: "transform opacity-0 scale-95"
                    -->
                          <div x-show="open" @click.outside="open = !open" class="absolute top-0 right-9 z-10 w-48 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none" role="menu" aria-orientation="vertical" aria-labelledby="options-menu-0-button" tabindex="-1">
                            <div class="py-1" role="none">
                              <!-- Active: "bg-gray-100 text-gray-900", Not Active: "text-gray-700" -->
                              <a :href="`/profile/?email=${contact.email}`" target="_blank" class="text-gray-700 block px-4 py-2 text-sm" role="menuitem" tabindex="-1" id="options-menu-0-item-0">View profile</a>
                              <button @click="open = !open; tabs.push({ 
                                id: contact.email, 
                                name: contact.first_name + ' ' + contact.last_name,
                                initials: contact.first_name[0] + contact.last_name[0], 
                                picture: contact.avatar_url 
                              })" class="text-gray-700 block px-4 py-2 text-sm" role="menuitem" tabindex="-1" id="options-menu-0-item-1">Send message</button>
                            </div>
                          </div>
                        </div>
                      </div>
                    </li>
                  </template>

                  <!-- More people... -->
                </ul>
              </div>
            </div>

            {# {% include 'write-private.njk' %} #}
          </div>
        </template>
      </div>
    </div>
  </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<script>
  function dataContact() {
    return {

      publicKey: null,
      privateKey: null,

      tabs: [
        {
          id: 'All'
        }, {
          id: 'Online'
        }, /*{
          id: 'Offline'
        },*/ {
          id: 'Unread'
        }
      ],

      async handleSubmit() {
        var plaintext = this.content
        var ciphertext = await this.encrypt(plaintext);

        const obj = {
          sender: Alpine
            .store('auth')
            .user
            .email,
          receiver: this.receiver,
          content: ciphertext,
          unread: true
        }
        fetch('/api/contact?mode=send', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(obj)
        }).then(() => this.$refs.content.reset())
      },

      /*      async hash(string) {
        const utf8 = new TextEncoder().encode(string);
        const hashBuffer = await crypto
          .subtle
          .digest('SHA-256', utf8);
        const hashArray = Array.from(new Uint8Array(hashBuffer));
        const hashHex = hashArray
          .map((bytes) => bytes.toString(16).padStart(2, '0'))
          .join('');
        return hashHex;
      }, */

      async init() {
        const keyPair = await window
          .crypto
          .subtle
          .generateKey({
            name: "ECDH",
            namedCurve: "P-256"
          }, true, ["deriveKey", "deriveBits"]);

        this.publicKey = await window
          .crypto
          .subtle
          .exportKey("jwk", keyPair.publicKey);

        this.privateKey = await window
          .crypto
          .subtle
          .exportKey("jwk", keyPair.privateKey);
      },

      async encrypt(text) {
        const initializationVector = crypto.getRandomValues(new Uint8Array(12));
        const encodedData = new TextEncoder().encode(text);

        const encryptedBuffer = await crypto
          .subtle
          .encrypt({
            name: "AES-GCM",
            iv: initializationVector,
            tagLength: 128
          }, this.derivedKey, encodedData);

        const encryptedDataBase64 = this.ab2b64(encryptedBuffer);
        const initializationVectorBase64 = this.ab2b64(initializationVector);
        return `${encryptedDataBase64}.${initializationVectorBase64}`;
      },

      async decrypt(encryptedData) {
        const {0: data, 1: iv} = encryptedData.split(".");
        const initializationVector = this.b642ab(iv);
        const _data = this.b642ab(data);
        const decryptedData = await crypto
          .subtle
          .decrypt({
            name: "AES-GCM",
            iv: initializationVector,
            tagLength: 128
          }, this.derivedKey, _data);
        let text = new TextDecoder().decode(decryptedData)
        if (text.includes('\\n')) 
          text = text.slice(1, text.length - 1)
        return text.replace(/\\n/g, String.fromCharCode(10))
      },

      ab2b64(arrayBuffer) {
        return btoa(String.fromCharCode.apply(null, new Uint8Array(arrayBuffer)));
      },

      b642ab(base64string) {
        return Uint8Array.from(atob(base64string), c => c.charCodeAt(0));
      },

      async handleKeys(contactEmail) {
        await fetch(`/api/contact?mode=sender_keys&email=${Alpine.store('auth').user.email}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            publicKey: JSON.stringify(this.publicKey),
            privateKey: JSON.stringify(this.privateKey)
          })
        })
          .then((response) => response.json())
          .then(async (message) => {

            this.publicKey = JSON.parse(message.data.publicKey)
            this.privateKey = JSON.parse(message.data.privateKey)

            this.publicKey = await window
              .crypto
              .subtle
              .importKey("jwk", this.publicKey, {
                name: "ECDH",
                namedCurve: "P-256"
              }, true, []);

            this.privateKey = await window
              .crypto
              .subtle
              .importKey("jwk", this.privateKey, {
                name: "ECDH",
                namedCurve: "P-256"
              }, true, ["deriveKey", "deriveBits"]);
          })

        if (contactEmail) 
          await fetch(`/api/contact?mode=receiver_keys&email=${contactEmail}`)
            .then((response) => response.json())
            .then(async (message) => {

              let publicKey = JSON.parse(message.data.publicKey)
              let privateKey = JSON.parse(message.data.privateKey)

              publicKey = await window
                .crypto
                .subtle
                .importKey("jwk", publicKey, {
                  name: "ECDH",
                  namedCurve: "P-256"
                }, true, []);

              privateKey = await window
                .crypto
                .subtle
                .importKey("jwk", privateKey, {
                  name: "ECDH",
                  namedCurve: "P-256"
                }, true, ["deriveKey", "deriveBits"]);

              this.derivedKey = await window
                .crypto
                .subtle
                .deriveKey({
                  name: "ECDH",
                  public: publicKey
                }, this.privateKey, {
                  name: "AES-GCM",
                  length: 256
                }, true, ["encrypt", "decrypt"]);
            });
        }
      }
  }
</script>